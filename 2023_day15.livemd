# Advent of Code - Day 15

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Introduction

--> Content

## Puzzle

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"15","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "15", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    input
    |> String.replace("\n", "")
    |> String.split(",", trim: true)
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  rn=1,cm-,qp=3,cm=2,\nqp-,pc=\n4,ot=9,ab=5,pc-,pc=6,ot=7
  """

  @expected ["rn=1", "cm-", "qp=3", "cm=2", "qp-", "pc=4", "ot=9", "ab=5", "pc-", "pc=6", "ot=7"]

  describe "parse/1" do
    test "simple example" do
      assert parse(@input) == @expected
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input_string) when is_bitstring(input_string), do: run(Parser.parse(input_string))

  def run(inputs) do
    inputs
    |> Enum.map(fn input -> hash_alg(input) end)
    |> Enum.sum()
  end

  def hash_alg(input) do
    input
    |> to_charlist()
    |> Enum.reduce(0, fn char, res ->
      # IO.inspect(char, label: :char)
      addit = res + char
      # IO.inspect(addit, label: :addit)
      mult = addit * 17
      # IO.inspect(mult, label: :mult_17)
      remaind = rem(mult, 256)
      # IO.inspect(remaind, label: :remaind_256)
      remaind
    end)
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @raw_input """
  rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7
  """

  @input Parser.parse(@raw_input)

  describe "run/1" do
    test "main example" do
      assert run(@raw_input) == 1320
    end
  end

  describe "hash_alg/1" do
    test "main examples" do
      assert hash_alg("rn=1") == 30
      assert hash_alg("cm-") == 253
      assert hash_alg("qp=3") == 97
      assert hash_alg("cm=2") == 47
      assert hash_alg("qp-") == 14
      assert hash_alg("pc=4") == 180
      assert hash_alg("ot=9") == 9
      assert hash_alg("ab=5") == 197
      assert hash_alg("pc-") == 48
      assert hash_alg("pc=6") == 214
      assert hash_alg("ot=7") == 231
    end
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(graph_string, iterations) when is_bitstring(graph_string),
    do: run(Parser.parse(graph_string), iterations)

  def run(graph, iterations) do
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @raw_input """
  rn=1,cm-,qp=3,cm=2,qp-,pc=4,ot=9,ab=5,pc-,pc=6,ot=7
  """

  @input Parser.parse(@raw_input)

  describe "run/1" do
    test "main example" do
      assert run(@raw_input) == 64
    end
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":3547,"stamp":{"token":"XCP.Aq04fNWfAJfjEmYlNsOSQ9UD1VnQqU2__vaUQyfD60Ivxzv-BuX8bnt8sX00-eQgOkDVrJOHLMUdfshn-s1YWvHKrOefti139x0DSTZ2ILhgmljkLm8","version":2}} -->
