# Advent of Code - Day 17

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Introduction

--> Content

## Puzzle

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"17","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "17", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    String.split(input, "\n", trim: true)
    |> Enum.map(fn line ->
      String.split(line, "", trim: true) |> Enum.map(fn string -> String.to_integer(string) end)
    end)
  end

  def parse_to_hash(input) do
    String.split(input, "\n", trim: true)
    |> Enum.with_index()
    |> Enum.map(fn {line, idx} ->
      String.split(line, "", trim: true)
      |> Enum.with_index()
      |> Enum.map(fn {cell, inner_idx} -> {{idx, inner_idx}, String.to_integer(cell)} end)
    end)
    |> List.flatten()
    |> Map.new()
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  2413432311323
  3215453535623
  3255245654254
  3446585845452
  4546657867536
  1438598798454
  4457876987766
  3637877979653
  4654967986887
  4564679986453
  1224686865563
  2546548887735
  4322674655533
  """

  @expected [
    [2, 4, 1, 3, 4, 3, 2, 3, 1, 1, 3, 2, 3],
    [3, 2, 1, 5, 4, 5, 3, 5, 3, 5, 6, 2, 3],
    [3, 2, 5, 5, 2, 4, 5, 6, 5, 4, 2, 5, 4],
    [3, 4, 4, 6, 5, 8, 5, 8, 4, 5, 4, 5, 2],
    [4, 5, 4, 6, 6, 5, 7, 8, 6, 7, 5, 3, 6],
    [1, 4, 3, 8, 5, 9, 8, 7, 9, 8, 4, 5, 4],
    [4, 4, 5, 7, 8, 7, 6, 9, 8, 7, 7, 6, 6],
    [3, 6, 3, 7, 8, 7, 7, 9, 7, 9, 6, 5, 3],
    [4, 6, 5, 4, 9, 6, 7, 9, 8, 6, 8, 8, 7],
    [4, 5, 6, 4, 6, 7, 9, 9, 8, 6, 4, 5, 3],
    [1, 2, 2, 4, 6, 8, 6, 8, 6, 5, 5, 6, 3],
    [2, 5, 4, 6, 5, 4, 8, 8, 8, 7, 7, 3, 5],
    [4, 3, 2, 2, 6, 7, 4, 6, 5, 5, 5, 3, 3]
  ]

  @expected2 %{
    0 => %{
      0 => 2,
      1 => 4,
      2 => 1,
      3 => 3,
      4 => 4,
      5 => 3,
      6 => 2,
      7 => 3,
      8 => 1,
      9 => 1,
      10 => 3,
      11 => 2,
      12 => 3
    },
    1 => %{
      0 => 3,
      1 => 2,
      2 => 1,
      3 => 5,
      4 => 4,
      5 => 5,
      6 => 3,
      7 => 5,
      8 => 3,
      9 => 5,
      10 => 6,
      11 => 2,
      12 => 3
    },
    2 => %{
      0 => 3,
      1 => 2,
      2 => 5,
      3 => 5,
      4 => 2,
      5 => 4,
      6 => 5,
      7 => 6,
      8 => 5,
      9 => 4,
      10 => 2,
      11 => 5,
      12 => 4
    },
    3 => %{
      0 => 3,
      1 => 4,
      2 => 4,
      3 => 6,
      4 => 5,
      5 => 8,
      6 => 5,
      7 => 8,
      8 => 4,
      9 => 5,
      10 => 4,
      11 => 5,
      12 => 2
    },
    4 => %{
      0 => 4,
      1 => 5,
      2 => 4,
      3 => 6,
      4 => 6,
      5 => 5,
      6 => 7,
      7 => 8,
      8 => 6,
      9 => 7,
      10 => 5,
      11 => 3,
      12 => 6
    },
    5 => %{
      0 => 1,
      1 => 4,
      2 => 3,
      3 => 8,
      4 => 5,
      5 => 9,
      6 => 8,
      7 => 7,
      8 => 9,
      9 => 8,
      10 => 4,
      11 => 5,
      12 => 4
    },
    6 => %{
      0 => 4,
      1 => 4,
      2 => 5,
      3 => 7,
      4 => 8,
      5 => 7,
      6 => 6,
      7 => 9,
      8 => 8,
      9 => 7,
      10 => 7,
      11 => 6,
      12 => 6
    },
    7 => %{
      0 => 3,
      1 => 6,
      2 => 3,
      3 => 7,
      4 => 8,
      5 => 7,
      6 => 7,
      7 => 9,
      8 => 7,
      9 => 9,
      10 => 6,
      11 => 5,
      12 => 3
    },
    8 => %{
      0 => 4,
      1 => 6,
      2 => 5,
      3 => 4,
      4 => 9,
      5 => 6,
      6 => 7,
      7 => 9,
      8 => 8,
      9 => 6,
      10 => 8,
      11 => 8,
      12 => 7
    },
    9 => %{
      0 => 4,
      1 => 5,
      2 => 6,
      3 => 4,
      4 => 6,
      5 => 7,
      6 => 9,
      7 => 9,
      8 => 8,
      9 => 6,
      10 => 4,
      11 => 5,
      12 => 3
    },
    10 => %{
      0 => 1,
      1 => 2,
      2 => 2,
      3 => 4,
      4 => 6,
      5 => 8,
      6 => 6,
      7 => 8,
      8 => 6,
      9 => 5,
      10 => 5,
      11 => 6,
      12 => 3
    },
    11 => %{
      0 => 2,
      1 => 5,
      2 => 4,
      3 => 6,
      4 => 5,
      5 => 4,
      6 => 8,
      7 => 8,
      8 => 8,
      9 => 7,
      10 => 7,
      11 => 3,
      12 => 5
    },
    12 => %{
      0 => 4,
      1 => 3,
      2 => 2,
      3 => 2,
      4 => 6,
      5 => 7,
      6 => 4,
      7 => 6,
      8 => 5,
      9 => 5,
      10 => 5,
      11 => 3,
      12 => 3
    }
  }

  @expected3 %{
    {0, 0} => 2,
    {0, 1} => 4,
    {0, 2} => 1,
    {0, 3} => 3,
    {0, 4} => 4,
    {0, 5} => 3,
    {0, 6} => 2,
    {0, 7} => 3,
    {0, 8} => 1,
    {0, 9} => 1,
    {0, 10} => 3,
    {0, 11} => 2,
    {0, 12} => 3,
    {1, 0} => 3,
    {1, 1} => 2,
    {1, 2} => 1,
    {1, 3} => 5,
    {1, 4} => 4,
    {1, 5} => 5,
    {1, 6} => 3,
    {1, 7} => 5,
    {1, 8} => 3,
    {1, 9} => 5,
    {1, 10} => 6,
    {1, 11} => 2,
    {1, 12} => 3,
    {2, 0} => 3,
    {2, 1} => 2,
    {2, 2} => 5,
    {2, 3} => 5,
    {2, 4} => 2,
    {2, 5} => 4,
    {2, 6} => 5,
    {2, 7} => 6,
    {2, 8} => 5,
    {2, 9} => 4,
    {2, 10} => 2,
    {2, 11} => 5,
    {2, 12} => 4,
    {3, 0} => 3,
    {3, 1} => 4,
    {3, 2} => 4,
    {3, 3} => 6,
    {3, 4} => 5,
    {3, 5} => 8,
    {3, 6} => 5,
    {3, 7} => 8,
    {3, 8} => 4,
    {3, 9} => 5,
    {3, 10} => 4,
    {3, 11} => 5,
    {3, 12} => 2,
    {4, 0} => 4,
    {4, 1} => 5,
    {4, 2} => 4,
    {4, 3} => 6,
    {4, 4} => 6,
    {4, 5} => 5,
    {4, 6} => 7,
    {4, 7} => 8,
    {4, 8} => 6,
    {4, 9} => 7,
    {4, 10} => 5,
    {4, 11} => 3,
    {4, 12} => 6,
    {5, 0} => 1,
    {5, 1} => 4,
    {5, 2} => 3,
    {5, 3} => 8,
    {5, 4} => 5,
    {5, 5} => 9,
    {5, 6} => 8,
    {5, 7} => 7,
    {5, 8} => 9,
    {5, 9} => 8,
    {5, 10} => 4,
    {5, 11} => 5,
    {5, 12} => 4,
    {6, 0} => 4,
    {6, 1} => 4,
    {6, 2} => 5,
    {6, 3} => 7,
    {6, 4} => 8,
    {6, 5} => 7,
    {6, 6} => 6,
    {6, 7} => 9,
    {6, 8} => 8,
    {6, 9} => 7,
    {6, 10} => 7,
    {6, 11} => 6,
    {6, 12} => 6,
    {7, 0} => 3,
    {7, 1} => 6,
    {7, 2} => 3,
    {7, 3} => 7,
    {7, 4} => 8,
    {7, 5} => 7,
    {7, 6} => 7,
    {7, 7} => 9,
    {7, 8} => 7,
    {7, 9} => 9,
    {7, 10} => 6,
    {7, 11} => 5,
    {7, 12} => 3,
    {8, 0} => 4,
    {8, 1} => 6,
    {8, 2} => 5,
    {8, 3} => 4,
    {8, 4} => 9,
    {8, 5} => 6,
    {8, 6} => 7,
    {8, 7} => 9,
    {8, 8} => 8,
    {8, 9} => 6,
    {8, 10} => 8,
    {8, 11} => 8,
    {8, 12} => 7,
    {9, 0} => 4,
    {9, 1} => 5,
    {9, 2} => 6,
    {9, 3} => 4,
    {9, 4} => 6,
    {9, 5} => 7,
    {9, 6} => 9,
    {9, 7} => 9,
    {9, 8} => 8,
    {9, 9} => 6,
    {9, 10} => 4,
    {9, 11} => 5,
    {9, 12} => 3,
    {10, 0} => 1,
    {10, 1} => 2,
    {10, 2} => 2,
    {10, 3} => 4,
    {10, 4} => 6,
    {10, 5} => 8,
    {10, 6} => 6,
    {10, 7} => 8,
    {10, 8} => 6,
    {10, 9} => 5,
    {10, 10} => 5,
    {10, 11} => 6,
    {10, 12} => 3,
    {11, 0} => 2,
    {11, 1} => 5,
    {11, 2} => 4,
    {11, 3} => 6,
    {11, 4} => 5,
    {11, 5} => 4,
    {11, 6} => 8,
    {11, 7} => 8,
    {11, 8} => 8,
    {11, 9} => 7,
    {11, 10} => 7,
    {11, 11} => 3,
    {11, 12} => 5,
    {12, 0} => 4,
    {12, 1} => 3,
    {12, 2} => 2,
    {12, 3} => 2,
    {12, 4} => 6,
    {12, 5} => 7,
    {12, 6} => 4,
    {12, 7} => 6,
    {12, 8} => 5,
    {12, 9} => 5,
    {12, 10} => 5,
    {12, 11} => 3,
    {12, 12} => 3
  }

  describe "parse/1" do
    test "simple example" do
      assert parse(@input) == @expected
      assert parse_to_hash(@input) == @expected3
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(tiles_string) when is_bitstring(tiles_string),
    do: run(Parser.parse_to_hash(tiles_string))

  def run(tiles) do
    # use dijkstra's algorithm, or A* 
    vertices = tiles |> Enum.map(fn {{row, col}, cell} -> {row, col, cell} end)
    source = coord_at(tiles, 0, 0)

    {dist, prev, q} =
      Enum.reduce(vertices, {%{}, %{}, []}, fn v, {dist, prev, q} ->
        {Map.put(dist, v, :infinity), Map.put(prev, v, :undefined), [v | q]}
      end)

    q = Enum.reverse(q)
    # This is 0 rather than the value of cell 0,0 because that cell doesn't count in burning
    dist = Map.put(dist, source, 0)

    {final_dist, prev} = reduce_q(tiles, q, dist, prev)

    dest = coord_at(tiles, number_of_rows(tiles) - 1, number_of_columns(tiles) - 1)

    # IO.inspect(final_dist)
    # IO.inspect(dest)
    # IO.inspect(prev)
    result_path = path(prev, dest)

    # IO.inspect(Map.values(prev) |> Enum.count(fn val -> val == :undefined end), label: :count_of_undefined)
    # IO.inspect(Map.values(prev) |> Enum.count(fn val -> val != :undefined end), label: :count_of_not_undefined)

    # IO.inspect(result_path, label: :result_path)

    processed_output =
      Enum.map(tiles, fn {{row, col}, cell} ->
        if Enum.find(result_path, fn {res_row, res_col, _} ->
             {row, col} == {res_row, res_col}
           end) do
          {{row, col}, "."}
        else
          {{row, col}, cell}
        end
      end)

    processed_output_final =
      Enum.map(0..(number_of_rows(tiles) - 1), fn row ->
        Enum.map(0..(number_of_columns(tiles) - 1), fn col ->
          Enum.find_value(processed_output, fn {{res_row, res_col}, cell} ->
            {res_row, res_col} == {row, col} && cell
          end)
        end)
        |> Enum.join()
        |> IO.puts()
      end)

    # IO.inspect(processed_output_final, label: :processed_output)

    Map.get(final_dist, dest)
  end

  def path(prev, coord), do: path(prev, coord, [])
  def path(prev, :undefined, res), do: Enum.reverse(res)

  def path(prev, coord, res) do
    next_val = Map.get(prev, coord)
    path(prev, next_val, [coord | res])
  end

  defp reduce_q(tiles, q, dist, prev) do
    # IO.inspect({q, dist}, label: :reduce_q_start_q_dist)

    u = vertex_in_q_with_min_dist(q, dist)
    q = List.delete(q, u)
    IO.inspect(%{u: u, dist_u: Map.get(dist, u)})

    # IO.inspect(neighbours_of_u_still_in_q(tiles, q, u), label: :neighbours_of_u_still_in_q)

    {dist, prev} =
      Enum.reduce(neighbours_of_u_still_in_q(tiles, q, u), {dist, prev}, fn v, {dist, prev} ->
        # IO.inspect({v, {dist, prev}}, label: :reduce_over_neighbours_in_q)

        alt =
          if :infinity in [Map.get(dist, u), edge(u, v)] do
            :infinity
          else
            Map.get(dist, u) + edge(u, v)
          end

        v_dist = Map.get(dist, v)

        IO.inspect(%{
          v: v,
          dist_u: Map.get(dist, u),
          edge_u_v: edge(u, v),
          alt: alt,
          dist_v: v_dist
        })

        # IO.inspect({alt, v_dist, Map.get(prev, u)}, label: :alt_and_v_dist_and_prevu)

        # IO.inspect(alt != :infinity && (v_dist == :infinity || alt < v_dist), label: :regular_condition_succ)
        # IO.inspect(!violates_three_forward_limit_rule?(u, v, prev), label: :three_forward_limit_succ)
        # IO.inspect({u, v, prev}, label: :u_v_prev)
        if alt != :infinity && (v_dist == :infinity || alt < v_dist) &&
             v != Map.get(prev, u) &&
             !violates_three_forward_limit_rule?(u, v, prev) do
          IO.inspect({v, alt}, label: :new_dist_for_v)
          {Map.put(dist, v, alt), Map.put(prev, v, u)}
        else
          {dist, prev}
        end
      end)

    # IO.inspect({dist}, label: :after_reduce_dist)

    if Enum.empty?(q) do
      {dist, prev}
    else
      # IO.inspect({q, dist}, label: :reduce_q_end_q_dist)
      reduce_q(tiles, q, dist, prev)
    end
  end

  def violates_three_forward_limit_rule?(current_coord, potential_next_coord, prev) do
    prev_coord = Map.get(prev, current_coord)
    prev_coordx2 = Map.get(prev, prev_coord)
    prev_coordx3 = Map.get(prev, prev_coordx2)

    # IO.inspect({current_coord, potential_next_coord, prev}, label: :input_to_violate_func)
    # IO.inspect({prev_coord, prev_coordx2, prev_coordx3}, label: :prev_coords_from_prev)

    steps = [prev_coordx3, prev_coordx2, prev_coord, current_coord, potential_next_coord]

    # IO.inspect(steps, label: :check_if_any_of_these_are_nil_or_undefined)
    # IO.inspect({steps, !Enum.any?(steps, fn v -> v in [nil, :undefined] end) && all_straight?(steps)}, label: :determining_forward_limit)
    !Enum.any?(steps, fn v -> v in [nil, :undefined] end) && all_straight?(steps)
    # && straight?(prev_coord, current_coord)
    # && straight?(prev_coordx2, prev_coord)
    # && straight?(prev_coordx3, prev_coordx2)

    # before1 = Map.get(prev, u)
    # before2 = Map.get(prev, before1)
    # before3 = Map.get(prev, before2)
  end

  defp all_straight?(coords) do
    # IO.inspect(coords, label: :coords_to_check_if_all_straight)
    Enum.map(coords, fn {row, _, _} -> row end) |> Enum.uniq() |> Enum.count() == 1 ||
      Enum.map(coords, fn {_, col, _} -> col end) |> Enum.uniq() |> Enum.count() == 1
  end

  def vertex_in_q_with_min_dist(q, dist) do
    # IO.inspect(q, label: :q)
    # IO.inspect(dist, label: :dist)
    Enum.min_by(q, fn v ->
      v_dist = Map.get(dist, v)

      if v_dist == :infinity do
        9_999_999_999_999
      else
        v_dist
      end
    end)
  end

  defp neighbours_of_u_still_in_q(tiles, q, u) do
    {u_row, u_col, _u_cell} = u

    potential_neighbours = [
      coord_at(tiles, u_row + 1, u_col),
      coord_at(tiles, u_row - 1, u_col),
      coord_at(tiles, u_row, u_col + 1),
      coord_at(tiles, u_row, u_col - 1)
    ]

    # IO.inspect(potential_neighbours, label: :potential_neighbours)
    Enum.filter(potential_neighbours, fn neighbour ->
      # Enum.any?(q, fn {q_row, q_col, q_cell} -> {q_row, q_col, q_cell} == neighbour end) \
      neighbour in q
    end)
  end

  # TODO - this is basically just maybe the cell value of v? ()
  defp edge(_u, {_, _, v_burn}) when is_integer(v_burn) do
    v_burn
  end

  def heat_loss(trail) do
    Enum.map(trail_excluding_start(trail), fn {_, _, cell_val} -> cell_val end)
    |> Enum.sum()
  end

  defp trail_excluding_start(trail) do
    tl(trail)
  end

  def coord_at(tiles, row, column, direction) do
    {row, column, Map.get(tiles, {row, column}), direction}
  end

  def coord_at(tiles, row, column) do
    # {row, column, cell_at(tiles, row, column)}
    {row, column, Map.get(tiles, {row, column})}
  end

  def cell_at(tiles, row, column) do
    # if row < 0 || column < 0 do # defend against negative string lookup cycling to end of string
    #   nil
    # else
    # row = tiles |> Map.get(row)
    # row && Map.get(row, column) 
    # end

    Map.get(tiles, {row, column})
  end

  defp number_of_rows(tiles) do
    # Enum.count(tiles)
    {{row, _column}, _cell} = Enum.max_by(tiles, fn {{row, _column}, _cell} -> row end)
    row + 1
  end

  defp number_of_columns(tiles) do
    # Enum.count(Map.get(tiles, 0))
    {{_row, column}, _cell} = Enum.max_by(tiles, fn {{_row, column}, _cell} -> column end)
    column + 1
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @raw_input """
  2413432311323
  3215453535623
  3255245654254
  3446585845452
  4546657867536
  1438598798454
  4457876987766
  3637877979653
  4654967986887
  4564679986453
  1224686865563
  2546548887735
  4322674655533
  """

  # 2..34....1323
  # 32....35.5623
  # 32552456...54
  # 3446585845.52
  # 4546657867..6
  # 14385987984.4
  # 44578769877.6
  # 36378779796..
  # 465496798688.
  # 456467998645.
  # 12246868655..
  # 25465488877.5
  # 43226746555..

  @raw_input2 """
  123
  456
  """

  @input Parser.parse_to_hash(@raw_input)

  describe "run/1" do
    test "main example" do
      # assert run(@raw_input2) == 2 + 3 + 6
      assert run(@raw_input) == 102
    end
  end

  describe "find_traversals/1" do
    test "main example" do
      # assert find_traversals(@input) == [[{0, 0, 2}, {0, 1, 4}]]
    end
  end

  describe "cell_at/3" do
    test "basic examples" do
      assert cell_at(@input, 0, 0) == 2
      assert cell_at(@input, 0, 1) == 4
      assert cell_at(@input, 1, 0) == 3
    end
  end

  describe "coord_at/3" do
    test "basic examples" do
      assert coord_at(@input, 0, 0) == {0, 0, 2}
      assert coord_at(@input, 0, 1) == {0, 1, 4}
      assert coord_at(@input, 1, 0) == {1, 0, 3}

      assert coord_at(@input, 0, 0, :east) == {0, 0, 2, :east}
      assert coord_at(@input, 0, 1, :east) == {0, 1, 4, :east}
      assert coord_at(@input, 1, 0, :east) == {1, 0, 3, :east}
    end
  end

  describe "heat_loss/3" do
    test "basic examples" do
      assert heat_loss([{0, 0, 2}, {0, 1, 4}]) == 4
      assert heat_loss([{0, 0, 2}, {1, 0, 3}]) == 3
      assert heat_loss([{0, 0, 2}, {0, 1, 4}, {1, 1, 2}]) == 6
    end
  end

  describe "vertex_in_q_with_min_dist/2" do
    test "simple example" do
      assert vertex_in_q_with_min_dist(
               [{0, 1, 1}, {0, 0, 3}, {1, 0, 2}],
               %{{0, 0, 3} => 0, {0, 1, 1} => :infinity, {1, 0, 2} => :infinity}
             ) == {0, 0, 3}

      assert vertex_in_q_with_min_dist(
               [{0, 1, 1}, {1, 0, 2}],
               %{{0, 0, 3} => 0, {0, 1, 1} => :infinity, {1, 0, 2} => 3}
             ) == {1, 0, 2}
    end
  end

  describe "violates_three_forward_limit_rule?/3" do
    test "simple example" do
      assert violates_three_forward_limit_rule?(
               {0, 0, 1},
               {1, 0, 4},
               %{
                 {0, 0, 1} => :undefined,
                 {0, 1, 2} => :undefined,
                 {0, 2, 3} => :undefined,
                 {1, 0, 4} => :undefined,
                 {1, 1, 5} => :undefined,
                 {1, 2, 6} => :undefined
               }
             ) == false

      assert violates_three_forward_limit_rule?(
               {0, 2, 3},
               {0, 3, 4},
               %{
                 {0, 0, 1} => :undefined,
                 {0, 1, 2} => {0, 0, 1},
                 {0, 2, 3} => {0, 1, 2},
                 {0, 3, 4} => :undefined,
                 {1, 0, 4} => :undefined,
                 {1, 1, 5} => :undefined,
                 {1, 2, 6} => :undefined
               }
             ) == false

      assert violates_three_forward_limit_rule?(
               {0, 3, 4},
               {0, 4, 5},
               %{
                 {0, 0, 1} => :undefined,
                 {0, 1, 2} => {0, 0, 1},
                 {0, 2, 3} => {0, 1, 2},
                 {0, 3, 4} => {0, 2, 3},
                 {0, 4, 5} => :undefined,
                 {1, 0, 4} => :undefined,
                 {1, 1, 5} => :undefined,
                 {1, 2, 6} => :undefined
               }
             ) == true

      assert violates_three_forward_limit_rule?(
               {0, 3, 4},
               {0, 4, 5},
               %{
                 {0, 0, 1} => :undefined,
                 {0, 1, 2} => {0, 0, 1},
                 {0, 2, 3} => {0, 1, 2},
                 {0, 3, 4} => {1, 3, 10},
                 {0, 4, 5} => :undefined,
                 {1, 0, 4} => :undefined,
                 {1, 1, 5} => :undefined,
                 {1, 2, 6} => :undefined,
                 {1, 3, 10} => {2, 3, 11},
                 {2, 3, 11} => {3, 3, 12}
               }
             ) == false
    end
  end
end

ExUnit.run()
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  import PartOne, except: [run: 1]

  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(tiles_string) when is_bitstring(tiles_string), do: run(Parser.parse(tiles_string))

  def run(tiles) do
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @raw_input """
  2413432311323
  3215453535623
  3255245654254
  3446585845452
  4546657867536
  1438598798454
  4457876987766
  3637877979653
  4654967986887
  4564679986453
  1224686865563
  2546548887735
  4322674655533
  """

  @input Parser.parse(@raw_input)

  describe "run/1" do
    test "main example" do
      assert run(@raw_input) == 51
    end
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
# 8674
```

<!-- livebook:{"offset":20686,"stamp":{"token":"XCP.i7oHoLRXeThn2Xe6NHtH2T0bnqSknr6N98FWc7swKvQL4qAGWsRWErsS-vOJvOSSw55xbGs8ZF8CuV4rv9knI_6ysJ40c-kk0VL4aVn4oNikOGD-afQ","version":2}} -->
