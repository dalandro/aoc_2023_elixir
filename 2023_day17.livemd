# Advent of Code - Day 17

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Introduction

--> Content

## Puzzle

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"17","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "17", System.fetch_env!("LB_AOC_SESSION"))
```

## Parser

### Code - Parser

```elixir
defmodule Parser do
  def parse(input) do
    String.split(input, "\n", trim: true)
  end
end
```

### Tests - Parser

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input """
  2413432311323
  3215453535623
  3255245654254
  3446585845452
  4546657867536
  1438598798454
  4457876987766
  3637877979653
  4654967986887
  4564679986453
  1224686865563
  2546548887735
  4322674655533
  """

  @expected [
    "2413432311323",
    "3215453535623",
    "3255245654254",
    "3446585845452",
    "4546657867536",
    "1438598798454",
    "4457876987766",
    "3637877979653",
    "4654967986887",
    "4564679986453",
    "1224686865563",
    "2546548887735",
    "4322674655533"
  ]

  describe "parse/1" do
    test "simple example" do
      assert parse(@input) == @expected
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":2} -->

## Part One

### Code - Part 1

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(tiles_string) when is_bitstring(tiles_string), do: run(Parser.parse(tiles_string))

  def run(tiles) do
    heat_losses =
      find_traversals(tiles)
      |> Enum.map(fn trail ->
        heat_loss(trail)
      end)

    !Enum.empty?(heat_losses) && Enum.min(heat_losses)
  end

  def heat_loss(trail) do
    Enum.map(trail_excluding_start(trail), fn {_, _, cell_val} -> cell_val end)
    |> Enum.sum()
  end

  defp trail_excluding_start(trail) do
    tl(trail)
  end

  def find_traversals(tiles) do
    # IO.inspect([], label: :HERE1)
    find_traversals(
      tiles,
      coord_at(tiles, 0, 0),
      {0, -1, nil},
      coord_at(tiles, length(tiles) - 1, String.length(hd(tiles)) - 1),
      MapSet.new()
    )
    |> List.flatten()
    |> Enum.map(fn %{trail: backwards_trail} -> Enum.reverse(backwards_trail) end)
  end

  defp find_traversals(_, dest, _prev, dest, trail_so_far) do
    # IO.inspect(trail_so_far, label: :HERE2)
    # IO.inspect({dest, trail_so_far}, label: :HERE2)
    # reached destination
    %{trail: trail_so_far}
  end

  defp find_traversals(_, {_row, _col, nil}, _prev, _dest, _trail_so_far) do
    # IO.inspect(trail_so_far, label: :HERE3)
    # IO.inspect({{row, col, nil}, trail_so_far}, label: :HERE3)
    # out of bounds since cell is nil
    []
  end

  defp find_traversals(tiles, current_coord, prev_coord, dest, trail_so_far) do
    # IO.inspect({current_coord, trail_so_far}, label: :HERE4); 
    # IO.inspect(trail_so_far, label: :HERE5); 

    # TODO: Is there ever a reason to cross over the same cell?
    #       Is it possible to do a loop in a low-cost path to avoid high-cost cells that goes over same cell?
    #       If so, we need to not just check the current cell, but also the direction (or maybe just previous cell) 
    if MapSet.member?(trail_so_far, current_coord) do
      # IO.puts("HERE")
      []
    else
      new_trail_so_far = MapSet.put(trail_so_far, current_coord)

      [
        find_traversals(
          tiles,
          turn_and_move_left(tiles, current_coord, prev_coord),
          current_coord,
          dest,
          new_trail_so_far
        ),
        find_traversals(
          tiles,
          move_forward(tiles, current_coord, prev_coord),
          current_coord,
          dest,
          new_trail_so_far
        ),
        find_traversals(
          tiles,
          turn_and_move_right(tiles, current_coord, prev_coord),
          current_coord,
          dest,
          new_trail_so_far
        )
      ]
    end
  end

  def move_forward(tiles, {row, col, _cell}, {row, prev_col, _prev_cell}) when col > prev_col,
    do: coord_at(tiles, row, col + 1)

  def move_forward(tiles, {row, col, _cell}, {row, prev_col, _prev_cell}) when col < prev_col,
    do: coord_at(tiles, row, col - 1)

  def move_forward(tiles, {row, col, _cell}, {prev_row, col, _prev_cell}) when row > prev_row,
    do: coord_at(tiles, row + 1, col)

  def move_forward(tiles, {row, col, _cell}, {prev_row, col, _prev_cell}) when row < prev_row,
    do: coord_at(tiles, row - 1, col)

  def turn_and_move_left(tiles, {row, col, _cell}, {row, prev_col, _prev_cell})
      when col > prev_col,
      do: coord_at(tiles, row - 1, col)

  def turn_and_move_left(tiles, {row, col, _cell}, {row, prev_col, _prev_cell})
      when col < prev_col,
      do: coord_at(tiles, row + 1, col)

  def turn_and_move_left(tiles, {row, col, _cell}, {prev_row, col, _prev_cell})
      when row > prev_row,
      do: coord_at(tiles, row, col + 1)

  def turn_and_move_left(tiles, {row, col, _cell}, {prev_row, col, _prev_cell})
      when row < prev_row,
      do: coord_at(tiles, row, col - 1)

  def turn_and_move_right(tiles, {row, col, _cell}, {row, prev_col, _prev_cell})
      when col > prev_col,
      do: coord_at(tiles, row + 1, col)

  def turn_and_move_right(tiles, {row, col, _cell}, {row, prev_col, _prev_cell})
      when col < prev_col,
      do: coord_at(tiles, row - 1, col)

  def turn_and_move_right(tiles, {row, col, _cell}, {prev_row, col, _prev_cell})
      when row > prev_row,
      do: coord_at(tiles, row, col - 1)

  def turn_and_move_right(tiles, {row, col, _cell}, {prev_row, col, _prev_cell})
      when row < prev_row,
      do: coord_at(tiles, row, col + 1)

  def coord_at(tiles, row, column) do
    {row, column, cell_at(tiles, row, column)}
  end

  def cell_at(tiles, row, column) do
    # defend against negative string lookup cycling to end of string
    if row < 0 || column < 0 do
      nil
    else
      row = tiles |> Enum.at(row)
      cell = row && String.at(row, column)
      cell && String.to_integer(cell)
    end
  end
end
```

### Tests - Part 1

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @raw_input """
  2413432311323
  3215453535623
  3255245654254
  3446585845452
  4546657867536
  1438598798454
  4457876987766
  3637877979653
  4654967986887
  4564679986453
  1224686865563
  2546548887735
  4322674655533
  """

  @raw_input2 """
  123
  456
  789
  """

  @input Parser.parse(@raw_input)

  describe "run/1" do
    test "main example" do
      # assert run(@raw_input) == 102
      assert run(@raw_input2)
    end
  end

  describe "find_traversals/1" do
    test "main example" do
      # assert find_traversals(@input) == [[{0, 0, 2}, {0, 1, 4}]]
    end
  end

  describe "cell_at/3" do
    test "basic examples" do
      assert cell_at(@input, 0, 0) == 2
      assert cell_at(@input, 0, 1) == 4
      assert cell_at(@input, 1, 0) == 3
    end
  end

  describe "coord_at/3" do
    test "basic examples" do
      assert coord_at(@input, 0, 0) == {0, 0, 2}
      assert coord_at(@input, 0, 1) == {0, 1, 4}
      assert coord_at(@input, 1, 0) == {1, 0, 3}
    end
  end

  describe "heat_loss/3" do
    test "basic examples" do
      assert heat_loss([{0, 0, 2}, {0, 1, 4}]) == 4
      assert heat_loss([{0, 0, 2}, {1, 0, 3}]) == 3
      assert heat_loss([{0, 0, 2}, {0, 1, 4}, {1, 1, 2}]) == 6
    end
  end

  describe "move_forward/3" do
    test "basic examples" do
      assert move_forward(@input, {0, 1, 2}, {0, 0, 2}) == {0, 2, 1}
      assert move_forward(@input, {0, 1, 2}, {0, 2, 1}) == {0, 0, 2}
      assert move_forward(@input, {1, 0, 3}, {0, 0, 2}) == {2, 0, 3}
      assert move_forward(@input, {1, 0, 3}, {2, 0, 3}) == {0, 0, 2}
    end
  end

  describe "turn_and_move_left/3" do
    test "basic examples" do
      # going east: turn north
      assert turn_and_move_left(@input, {0, 1, 2}, {0, 0, 2}) == {-1, 1, nil}
      # going west: turn south
      assert turn_and_move_left(@input, {0, 1, 2}, {0, 2, 1}) == {1, 1, 2}
      # going south: turn east
      assert turn_and_move_left(@input, {1, 0, 3}, {0, 0, 2}) == {1, 1, 2}
      # going north: turn west
      assert turn_and_move_left(@input, {1, 0, 3}, {2, 0, 3}) == {1, -1, nil}
    end
  end

  describe "turn_and_move_rigteeeh/3" do
    test "basic examples" do
      # going east: turn south
      assert turn_and_move_right(@input, {0, 1, 2}, {0, 0, 2}) == {1, 1, 2}
      # going west: turn north
      assert turn_and_move_right(@input, {0, 1, 2}, {0, 2, 1}) == {-1, 1, nil}
      # going south: turn west
      assert turn_and_move_right(@input, {1, 0, 3}, {0, 0, 2}) == {1, -1, nil}
      # going north: turn east
      assert turn_and_move_right(@input, {1, 0, 3}, {2, 0, 3}) == {1, 1, 2}
    end
  end
end

ExUnit.run()

# 123 
# 456 
# 789 
```

### Solution - Part 1

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":2} -->

## Part Two

### Code - Part 2

```elixir
defmodule PartTwo do
  import PartOne, except: [run: 1]

  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(tiles_string) when is_bitstring(tiles_string), do: run(Parser.parse(tiles_string))

  def run(tiles) do
  end
end
```

### Tests - Part 2

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @raw_input """
  2413432311323
  3215453535623
  3255245654254
  3446585845452
  4546657867536
  1438598798454
  4457876987766
  3637877979653
  4654967986887
  4564679986453
  1224686865563
  2546548887735
  4322674655533
  """

  @input Parser.parse(@raw_input)

  describe "run/1" do
    test "main example" do
      assert run(@raw_input) == 51
    end
  end
end

ExUnit.run()
```

### Solution - Part 2

```elixir
PartTwo.solve(puzzle_input)
# 8674
```

<!-- livebook:{"offset":10021,"stamp":{"token":"XCP.uTGcY2Tl-kPUk-Jsn7lb98wKf5qZQ6izixLDZOJcWQoqqsJst8yf09cHi0W5lnbbsTe4mIRtxXMa9rl-iQlIjBqjLjEcNPvIjydLG6UO3lN0bg7wscA","version":2}} -->
